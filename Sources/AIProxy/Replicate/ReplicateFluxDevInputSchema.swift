//
//  ReplicateFluxDevInputSchema.swift
//
//  Created by Lou Zell on 8/30/24.
//

import Foundation

/// Input schema for use with requests to Black Forest Lab's Pro model:
/// https://replicate.com/black-forest-labs/flux-dev/api/schema#input-schema
nonisolated public struct ReplicateFluxDevInputSchema: Encodable, Sendable {
    // Required

    /// Text prompt for image generation.
    public let prompt: String

    // Optional

    /// Aspect ratio for the generated image.
    /// Valid selections are `1:1`, `16:9`, `21:9`, `2:3`, `3:2`, `4:5`, `5:4`, `9:16`, `9:21`
    ///
    /// Defaults to `1:1`
    public let aspectRatio: String?

    /// Disable safety checker for generated images.
    ///
    /// Defaults to false
    public let disableSafetyChecker: Bool?

    /// Run faster predictions with model optimized for speed (currently fp8 quantized); disable to run in original bf16
    /// Defaults to `true`
    public let goFast: Bool?

    /// Controls the balance between adherence to the text prompt and image quality/diversity.
    /// Higher values make the output more closely match the prompt but may reduce overall
    /// image quality. Lower values allow for more creative freedom but might produce results
    /// less relevant to the prompt.
    ///
    /// Defaults to 3; acceptable range is 0 to 10.
    public let guidance: Double?

    /// Input image for image to image mode. The aspect ratio of your output will match this image
    public let image: URL?

    /// Number of denoising steps. Recommended range is 28-50
    ///
    /// Defaults to 28; acceptable range is 1 to 50
    public let numInferenceSteps: Int?

    /// Number of outputs to generate
    ///
    /// Defaults to 1; acceptable range is 1 to 4
    public let numOutputs: Int?

    /// Format of the output images
    ///
    /// Defaults to `.webp`
    public let outputFormat: OutputFormat?

    /// Quality when saving the output images, from 0 to 100. 100 is best quality, 0 is lowest quality. Not relevant for .png outputs
    ///
    /// Defaults to 80; acceptable range is 0 to 100
    public let outputQuality: Int?

    /// Prompt strength when using img2img. 1.0 corresponds to full destruction of information in image
    ///
    /// Defaults to 0.8; acceptable range is 0 to 1
    public let promptStrength: Double?

    /// Random seed. Set for reproducible generation
    public let seed: Int?

    private enum CodingKeys: String, CodingKey {
        case aspectRatio = "aspect_ratio"
        case disableSafetyChecker = "disable_safety_checker"
        case goFast = "go_fast"
        case guidance
        case image
        case numInferenceSteps = "num_inference_steps"
        case numOutputs = "num_outputs"
        case outputFormat = "output_format"
        case outputQuality = "output_quality"
        case prompt
        case promptStrength = "prompt_strength"
        case seed
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        aspectRatio: String? = nil,
        disableSafetyChecker: Bool? = nil,
        goFast: Bool? = nil,
        guidance: Double? = nil,
        image: URL? = nil,
        numInferenceSteps: Int? = nil,
        numOutputs: Int? = nil,
        outputFormat: ReplicateFluxDevInputSchema.OutputFormat? = nil,
        outputQuality: Int? = nil,
        promptStrength: Double? = nil,
        seed: Int? = nil
    ) {
        self.prompt = prompt
        self.aspectRatio = aspectRatio
        self.disableSafetyChecker = disableSafetyChecker
        self.goFast = goFast
        self.guidance = guidance
        self.image = image
        self.numInferenceSteps = numInferenceSteps
        self.numOutputs = numOutputs
        self.outputFormat = outputFormat
        self.outputQuality = outputQuality
        self.promptStrength = promptStrength
        self.seed = seed
    }
}

extension ReplicateFluxDevInputSchema {
    nonisolated public enum OutputFormat: String, Encodable, Sendable {
        case jpg
        case png
        case webp
    }
}
