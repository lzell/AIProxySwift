//
//  ReplicateFluxFineTuneInputSchema.swift
//
//
//  Created by Lou Zell on 9/10/24.
//

import Foundation

nonisolated public struct ReplicateFluxFineTuneInputSchema: Encodable, Sendable {

    // Required
    public let prompt: String

    // Optional

    /// Aspect ratio for the generated image. The size will always be 1 megapixel, i.e.
    /// `1024x1024` if aspect ratio is `1:1`. To use arbitrary width and height, set aspect ratio
    /// to 'custom'.
    public let aspectRatio: String?

    /// Disable safety checker for generated images.
    public let disableSafetyChecker: Bool?

    /// Combine this fine-tune with another LoRA. Supports Replicate models in the format
    /// `<owner>/<username>` or `<owner>/<username>/<version>`, HuggingFace URLs in the format
    /// `huggingface.co/<owner>/<model-name>`, CivitAI URLs in the format
    /// `civitai.com/models/<id>[/<model-name>]`, or arbitrary .safetensors URLs from the
    /// Internet. For example, `fofr/flux-pixar-cars`
    public let extraLora: String?

    /// Determines how strongly the extra LoRA should be applied.
    /// Default: 1
    /// Min: -1, Max: 2
    public let extraLoraScale: Double?

    /// Guidance scale for the diffusion process. Lower values can give more realistic images.
    /// Good values to try are 2, 2.5, 3 and 3.5
    ///
    /// Default: 3.5
    public let guidanceScale: Double?

    /// Height of the generated image. Optional, only used when `aspectRatio=custom`. Must be a
    /// multiple of 16 (if it's not, it will be rounded to nearest multiple of 16). Note:
    /// Overridden by input image in img2img and inpainting modes.
    public let height: Int?

    /// Determines how strongly the main LoRA should be applied. Sane results between 0 and 1.
    /// min: -1, max: 2
    public let loraScale: Double?

    /// Which model to run inferences with. The dev model needs around 28 `numInferenceSteps`
    /// but the schnell model only needs around 4 `numInferenceSteps`.
    public let model: FluxModel?

    /// Number of inference steps. More steps can give more detailed images, but take longer.
    public let numInferenceSteps: Int?

    /// Number of images to output.
    /// Defaults to 1
    public let numOutputs: Int?

    /// Format of the output images.
    /// Default: "webp"
    public let outputFormat: OutputFormat?

    /// Quality when saving the output images, from 0 to 100. 100 is best quality, 0 is lowest quality.
    /// Not relevant for `.png` outputs
    /// Default: 90
    public let outputQuality: Int?

    /// Random seed. Set for reproducible generation.
    public let seed: Int?

    /// Width of the generated image. Optional, only used when `aspectRatio=custom`. Must be a
    /// multiple of 16 (if it's not, it will be rounded to nearest multiple of 16). Note:
    /// Overridden by input image in img2img and inpainting modes.
    public let width: Int?

    private enum CodingKeys: String, CodingKey {
        case prompt
        case aspectRatio = "aspect_ratio"
        case disableSafetyChecker = "disable_safety_checker"
        case extraLora = "extra_lora"
        case extraLoraScale = "extra_lora_scale"
        case guidanceScale = "guidance_scale"
        case height
        case loraScale = "lora_scale"
        case model
        case numInferenceSteps = "num_inference_steps"
        case numOutputs = "num_outputs"
        case outputFormat = "output_format"
        case outputQuality = "output_quality"
        case seed
        case width
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        aspectRatio: String? = nil,
        disableSafetyChecker: Bool? = nil,
        extraLora: String? = nil,
        extraLoraScale: Double? = nil,
        guidanceScale: Double? = nil,
        height: Int? = nil,
        loraScale: Double? = nil,
        model: ReplicateFluxFineTuneInputSchema.FluxModel? = nil,
        numInferenceSteps: Int? = nil,
        numOutputs: Int? = nil,
        outputFormat: ReplicateFluxFineTuneInputSchema.OutputFormat? = nil,
        outputQuality: Int? = nil,
        seed: Int? = nil,
        width: Int? = nil
    ) {
        self.prompt = prompt
        self.aspectRatio = aspectRatio
        self.disableSafetyChecker = disableSafetyChecker
        self.extraLora = extraLora
        self.extraLoraScale = extraLoraScale
        self.guidanceScale = guidanceScale
        self.height = height
        self.loraScale = loraScale
        self.model = model
        self.numInferenceSteps = numInferenceSteps
        self.numOutputs = numOutputs
        self.outputFormat = outputFormat
        self.outputQuality = outputQuality
        self.seed = seed
        self.width = width
    }
}

extension ReplicateFluxFineTuneInputSchema {
    nonisolated public enum FluxModel: String, Encodable, Sendable {
        case dev
        case schnell
    }
}

extension ReplicateFluxFineTuneInputSchema {
    nonisolated public enum OutputFormat: String, Encodable, Sendable {
        case jpeg
        case png
        case webp
    }
}
