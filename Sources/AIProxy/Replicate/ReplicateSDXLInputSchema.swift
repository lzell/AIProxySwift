//
//  ReplicateSDXLInputSchema.swift
//
//
//  Created by Lou Zell on 8/24/24.
//

import Foundation

/// Input schema for use with requests to Stability AI's SDXL model:
/// https://replicate.com/stability-ai/sdxl/api/schema#input-schema
nonisolated public struct ReplicateSDXLInputSchema: Encodable, Sendable {

    /// Prompt for generated image
    let prompt: String

    // MARK: Optional

    /// Applies a watermark to enable determining if an image is generated in downstream
    /// applications. If you have other provisions for generating or deploying images safely,
    /// you can use this to disable watermarking. Defaults to true.
    public let applyWatermark: Bool?

    /// Disable safety checker for generated images. This feature is only available through the
    /// API. Defaults to false.
    public let disableSafetyChecker: Bool?

    /// Scale for classifier-free guidance. Defaults to 7.5.
    public let guidanceScale: Double?

    /// Height of output image. Defaults to `1024`.
    public let height: Int?

    /// For `Refiner.expertEnsembleRefiner`, the fraction of noise to use. Defaults to `0.8`.
    public let highNoiseFrac: Double?

    /// Input image for img2img or inpaint mode.
    public let image: URL?

    /// LoRA additive scale. Only applicable on trained models. Defaults to 0.6.
    public let loraScale: Double?

    /// Input mask for inpaint mode. Black areas will be preserved, white areas will be inpainted.
    public let mask: URL?

    /// Input Negative Prompt. Defaults to an empty string.
    public let negativePrompt: String?

    /// Number of denoising steps. Defaults to `50`, with a maximum of `500`.
    public let numInferenceSteps: Int?

    /// Number of images to output. Defaults to `1`, with a maximum of `4`.
    public let numOutputs: Int?

    /// Prompt strength when using img2img/inpaint. `1.0` corresponds to full destruction of
    /// information in the image. Defaults to `0.8`.
    public let promptStrength: Double?

    /// Which refine style to use. Defaults to `noRefiner`
    public let refine: Refiner?

    /// For `Refiner.baseImageRefiner`, the number of steps to refine, defaults to `numInferenceSteps`.
    public let refineSteps: Int?

    /// Scheduler to use. Defaults to `.kEuler`.
    public let scheduler: Scheduler?

    /// Random seed. Leave blank to randomize the seed.
    public let seed: Int?

    /// Width of output image. Defaults to 1024.
    public let width: Int?

    private enum CodingKeys: String, CodingKey {
        case applyWatermark = "apply_watermark"
        case disableSafetyChecker = "disable_safety_checker"
        case guidanceScale = "guidance_scale"
        case height
        case highNoiseFrac = "high_noise_frac"
        case image
        case loraScale = "lora_scale"
        case mask
        case negativePrompt = "negative_prompt"
        case numInferenceSteps = "num_inference_steps"
        case numOutputs = "num_outputs"
        case prompt
        case promptStrength = "prompt_strength"
        case refine
        case refineSteps = "refine_steps"
        case scheduler
        case seed
        case width
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        applyWatermark: Bool? = nil,
        disableSafetyChecker: Bool? = nil,
        guidanceScale: Double? = nil,
        height: Int? = nil,
        highNoiseFrac: Double? = nil,
        image: URL? = nil,
        loraScale: Double? = nil,
        mask: URL? = nil,
        negativePrompt: String? = nil,
        numInferenceSteps: Int? = nil,
        numOutputs: Int? = nil,
        promptStrength: Double? = nil,
        refine: ReplicateSDXLInputSchema.Refiner? = nil,
        refineSteps: Int? = nil,
        scheduler: ReplicateSDXLInputSchema.Scheduler? = nil,
        seed: Int? = nil,
        width: Int? = nil
    ) {
        self.prompt = prompt
        self.applyWatermark = applyWatermark
        self.disableSafetyChecker = disableSafetyChecker
        self.guidanceScale = guidanceScale
        self.height = height
        self.highNoiseFrac = highNoiseFrac
        self.image = image
        self.loraScale = loraScale
        self.mask = mask
        self.negativePrompt = negativePrompt
        self.numInferenceSteps = numInferenceSteps
        self.numOutputs = numOutputs
        self.promptStrength = promptStrength
        self.refine = refine
        self.refineSteps = refineSteps
        self.scheduler = scheduler
        self.seed = seed
        self.width = width
    }
}

extension ReplicateSDXLInputSchema {
    nonisolated public enum Refiner: String, Encodable, Sendable {
        case baseImageRefiner = "base_image_refiner"
        case expertEnsembleRefiner = "expert_ensemble_refiner"
        case noRefiner = "no_refiner"
    }
}

extension ReplicateSDXLInputSchema {
    nonisolated public enum Scheduler: String, Encodable, Sendable {
        case ddim = "DDIM"
        case dpmSolverMultistep = "DPMSolverMultistep"
        case heunDiscrete = "HeunDiscrete"
        case kEuler = "K_EULER"
        case kEulerAncestral = "K_EULER_ANCESTRAL"
        case karrasDPM = "KarrasDPM"
        case pndm = "PNDM"
    }
}
