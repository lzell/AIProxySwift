//
//  StabilityAIStableDiffusionRequestBody.swift
//
//
//  Created by Lou Zell on 8/12/24.
//
import Foundation

// The models below are derived from this reference:
// https://platform.stability.ai/docs/api-reference#tag/Generate/paths/~1v2beta~1stable-image~1generate~1sd3/post
public struct StabilityAIStableDiffusionRequestBody: MultipartFormEncodable {

    // MARK: Required

    /// What you wish to see in the output image. A strong, descriptive prompt that clearly defines
    /// elements, colors, and subjects will lead to better results.
    /// Accepts 1 to 10,000 characters.
    public let prompt: String

    // MARK: Optional

    /// Controls the aspect ratio of the generated image.
    /// Default: "1:1"
    /// Possible values: "16:9", "1:1", "21:9", "2:3", "3:2", "4:5", "5:4", "9:16", "9:21"
    /// Important: This parameter is only valid for `text-to-image` requests.
    public let aspectRatio: String?

    /// The image to use as the starting point for the generation, as jpeg data.
    /// - The image must be in jpeg format
    /// - Every side must be at least 64 pixels
    /// Important: This parameter is only valid for image-to-image requests.
    ///
    /// If you set this, you must also set `strength` and `mode` to `.imageToImage`
    public let image: Data?

    /// Controls whether this is a text-to-image or image-to-image generation, which affects which
    /// parameters are required:
    ///
    ///     text-to-image requires only the prompt parameter
    ///     image-to-image requires the prompt, image, and strength parameters
    ///
    /// Defaults to `text-to-image`
    public let mode: StabilityAIGenerationMode?

    /// The model to use for generation.
    ///
    ///    sd3Medium requires 3.5 credits per generation
    ///    sd3Large requires 6.5 credits per generation
    ///    sd3LargeTurbo requires 4 credits per generation
    ///
    /// Defaults to `sd3Large`
    public let model: StabilityAIStableDiffusionModel?

    /// Keywords of what you do not wish to see in the output image. This is an advanced feature.
    /// Important: This parameter does not work with sd3-large-turbo.
    public let negativePrompt: String?

    /// Dictates the `content-type` of the generated image
    /// Defaults to `png`
    public let outputFormat: StabilityAIStableDiffusionOutputFormat?

    /// A specific value that is used to guide the 'randomness' of the generation. (Omit this
    /// parameter or pass `0` to use a random seed.)
    /// Possible values: `[ 0 .. 4294967294 ]`
    public let seed: Int?

    /// Sometimes referred to as denoising, this parameter controls how much influence the image parameter has on the generated image. A value of 0 would yield an image that is identical to the input. A value of 1 would be as if you passed in no image at all.
    /// Important: This parameter is only valid for image-to-image requests.
    public let strength: Double?

    public var formFields: [FormField] {
        let theFields: [FormField] = [
            .textField(name: "prompt", content: self.prompt),
            self.aspectRatio.flatMap { .textField(name: "aspect_ratio", content: $0) },
            self.image.flatMap { .fileField(name: "image", content: $0, contentType: "image/jpeg", filename: "aiproxy.m4a") },
            self.mode.flatMap { .textField(name: "mode", content: $0.rawValue) },
            self.model.flatMap { .textField(name: "model", content: $0.rawValue) },
            self.negativePrompt.flatMap { .textField(name: "negative_prompt", content: $0) },
            self.outputFormat.flatMap { .textField(name: "output_format", content: $0.rawValue) },
            self.seed.flatMap { .textField(name: "seed", content: String($0)) },
            self.strength.flatMap { .textField(name: "strength", content: String($0)) },
        ].compactMap { $0 }

        return theFields

    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        aspectRatio: String? = nil,
        image: Data? = nil,
        mode: StabilityAIGenerationMode? = nil,
        model: StabilityAIStableDiffusionModel? = nil,
        negativePrompt: String? = nil,
        outputFormat: StabilityAIStableDiffusionOutputFormat? = nil,
        seed: Int? = nil,
        strength: Double? = nil
    ) {
        self.prompt = prompt
        self.aspectRatio = aspectRatio
        self.image = image
        self.mode = mode
        self.model = model
        self.negativePrompt = negativePrompt
        self.outputFormat = outputFormat
        self.seed = seed
        self.strength = strength
    }
}

public enum StabilityAIStableDiffusionOutputFormat: String {
    case jpeg
    case png
}

public enum StabilityAIGenerationMode: String {
    case textToImage = "text-to-image"
    case imageToImage = "image-to-image"
}

public enum StabilityAIStableDiffusionModel: String {
    case sd3Medium = "sd3-medium"
    case sd3Large = "sd3-large"
    case sd3LargeTurbo = "sd3-large-turbo"
}
