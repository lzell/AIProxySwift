//
//  OpenAIResponse.swift
//  AIProxy
//
//  Created by Lou Zell on 3/13/25.
//

/// https://platform.openai.com/docs/api-reference/responses/object
// Implementor's note:
// See 'class Response' in `src/openai/types/responses/response.py `
public struct OpenAIResponse: Decodable {
    /// Unix timestamp (in seconds) of when this Response was created.
    public let createdAt: Double?

    /// An error object returned when the model fails to generate a Response.
    public let error: ResponseError?

    /// Unique identifier for this Response.
    public let id: String?

    /// Details about why the response is incomplete.
    public let incompleteDetails: IncompleteDetails?

    /// Inserts a system (or developer) message as the first item in the model's context.
    /// When using along with `previousResponseId`, the instructions from a previous response will not be carried over to the next response.
    /// This makes it simple to swap out system (or developer) messages in new responses.
    public let instructions: String?

    /// An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
    public let maxOutputTokens: Int?

    /// Set of 16 key-value pairs that can be attached to an object.
    /// This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
    /// Keys are strings with a maximum length of 64 characters.
    /// Values are strings with a maximum length of 512 characters.
    public let metadata: [String: String]?

    /// Model ID used to generate the response, like `gpt-4o` or `o1`.
    /// OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points.
    /// Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models.
    public let model: String?

    /// An array of content items generated by the model.
    /// - The length and order of items in the `output` array is dependent on the model's response.
    /// - Rather than accessing the first item in the `output` array and assuming it's an `assistant` message with the content generated by the model, you might consider using the `outputText` getter.
    public let output: [ResponseOutputItem]

    /// Whether to allow the model to run tool calls in parallel.
    public let parallelToolCalls: Bool?

    /// The unique ID of the previous response to the model.
    /// Use this to create multi-turn conversations.
    /// Learn more about [conversation state](https://platform.openai.com/docs/guides/conversation-state).
    public let previousResponseId: String?

    /// o-series models only
    /// Configuration options for [reasoning models](https://platform.openai.com/docs/guides/reasoning).
    public let reasoning: Reasoning?

    /// The status of the response generation.
    /// One of `completed`, `failed`, `in_progress`, or `incomplete`.
    public let status: Status?

    /// Configuration options for a text response from the model.
    /// Can be plain text or structured JSON data.
    /// Learn more:
    /// - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
    /// - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)
    public let text: ResponseTextConfig?

    /// What sampling temperature to use, between 0 and 2.
    /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    /// We generally recommend altering this or `topP` but not both.
    public let temperature: Double?

    /// How the model should select which tool (or tools) to use when generating a response.
    /// See the `tools` parameter to see how to specify which tools the model can call.
    public let toolChoice: OpenAICreateResponseRequestBody.ToolChoice?

    /// An array of tools the model may call while generating a response.
    /// You can specify which tool to use by setting the `toolChoice` parameter.
    /// The two categories of tools you can provide the model are:
    /// - **Built-in tools**: Tools that are provided by OpenAI that extend the model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search) or [file search](https://platform.openai.com/docs/guides/tools-file-search).
    ///   Learn more about [built-in tools](https://platform.openai.com/docs/guides/tools).
    /// - **Function calls (custom tools)**: Functions that are defined by you, enabling the model to call your own code.
    ///   Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).
    public let tools: [OpenAICreateResponseRequestBody.Tool]?

    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
    /// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    /// We generally recommend altering this or `temperature` but not both.
    public let topP: Double?

    /// The truncation strategy to use for the model response.
    /// - `auto`: If the context of this response and previous ones exceeds the model's context window size, the model will truncate the response to fit the context window by dropping input items in the middle of the conversation.
    /// - `disabled` (default): If a model response will exceed the context window size for a model, the request will fail with a 400 error.
    public let truncation: String?

    /// Represents token usage details including input tokens, output tokens, a breakdown of output tokens, and the total tokens used.
    public let usage: ResponseUsage?

    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    /// [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
    public let user: String?
    
    public init(createdAt: Double?, error: ResponseError?, id: String?, incompleteDetails: IncompleteDetails?, instructions: String?, maxOutputTokens: Int?, metadata: [String : String]?, model: String?, output: [ResponseOutputItem], parallelToolCalls: Bool?, previousResponseId: String?, reasoning: Reasoning?, status: Status?, text: ResponseTextConfig?, temperature: Double?, toolChoice: OpenAICreateResponseRequestBody.ToolChoice?, tools: [OpenAICreateResponseRequestBody.Tool]?, topP: Double?, truncation: String?, usage: ResponseUsage?, user: String?) {
        self.createdAt = createdAt
        self.error = error
        self.id = id
        self.incompleteDetails = incompleteDetails
        self.instructions = instructions
        self.maxOutputTokens = maxOutputTokens
        self.metadata = metadata
        self.model = model
        self.output = output
        self.parallelToolCalls = parallelToolCalls
        self.previousResponseId = previousResponseId
        self.reasoning = reasoning
        self.status = status
        self.text = text
        self.temperature = temperature
        self.toolChoice = toolChoice
        self.tools = tools
        self.topP = topP
        self.truncation = truncation
        self.usage = usage
        self.user = user
    }

    /// Convenience property that aggregates all `outputText` items from the `output` list.
    /// If no `outputText` content blocks exist, then an empty string is returned.
    public var outputText: String {
        var texts = [String]()
        for item in output {
            switch item {
            case .message(let msg):
                for content in msg.content {
                    switch content {
                    case .outputText(let txt):
                        texts.append(txt.text)
                    case .refusal:
                        break
                    }
                }
            case .webSearchCall, .fileSearchCall, .functionCall, .computerCall, .reasoning:
                break
            }
        }
        return texts.joined()
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case error
        case id
        case incompleteDetails = "incomplete_details"
        case instructions
        case maxOutputTokens = "max_output_tokens"
        case metadata
        case model
        case output
        case parallelToolCalls = "parallel_tool_calls"
        case previousResponseId = "previous_response_id"
        case reasoning
        case status
        case text
        case temperature
        case toolChoice = "tool_choice"
        case tools
        case topP = "top_p"
        case truncation
        case usage
        case user
    }
}

extension OpenAIResponse {
    public struct IncompleteDetails: Decodable {
        /// The reason why the response is incomplete.
        let reason: String
    }

    public struct ResponseError: Decodable {
        /// The error code for the response.
        let code: String

        /// A human-readable description of the error.
        let message: String
    }

    public struct Reasoning: Decodable {
        /// Constrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).
        /// Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
        let effort: Effort?

        /// A summary of the reasoning performed by the model. This can be useful for debugging and understanding the model's reasoning process.
        let generateSummary: String?

        private enum CodingKeys: String, CodingKey {
            case effort
            case generateSummary = "generate_summary"
        }
    }

    public enum Status: String, Decodable {
        case completed
        case failed
        case incomplete
        case inProgress = "in_progress"
    }

    public struct ResponseTextConfig: Decodable {
        let format: Format
    }

    /// Represents the literal options: "none", "auto", or "required".
    public enum ToolChoiceOptions: String, Decodable {
        case none = "none"
        case auto = "auto"
        case required = "required"
    }

    public struct OutputTokensDetails: Decodable {
        public let reasoningTokens: Int

        private enum CodingKeys: String, CodingKey {
            case reasoningTokens = "reasoning_tokens"
        }
    }

    public struct ResponseUsage: Decodable {
        public let inputTokens: Int?
        public let outputTokens: Int?
        public let outputTokensDetails: OutputTokensDetails?
        public let totalTokens: Int?

        private enum CodingKeys: String, CodingKey {
            case inputTokens = "input_tokens"
            case outputTokens = "output_tokens"
            case outputTokensDetails = "output_tokens_details"
            case totalTokens = "total_tokens"
        }
    }
}

extension OpenAIResponse.Reasoning {
    public enum Effort: String, Decodable {
        case low
        case medium
        case high
    }
}

extension OpenAIResponse.ResponseTextConfig {
    public enum Format: String, Decodable {
        case jsonSchema = "json_schema"
        case text = "text"

        private enum CodingKeys: String, CodingKey {
            case type
        }
        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let formatValue = try container.decode(String.self, forKey: .type)
            switch formatValue {
            case "json_schema":
                self = .jsonSchema
            case "text":
                self = .text
            default:
                throw DecodingError.dataCorruptedError(
                    forKey: .type,
                    in: container,
                    debugDescription: "Unknown format type: \(formatValue)"
                )
            }
        }
    }
}

extension OpenAIResponse {
    /// https://platform.openai.com/docs/api-reference/responses/object#responses/object-output
    public enum ResponseOutputItem: Decodable {
        case message(ResponseOutputMessage)
        case webSearchCall(WebSearchCall)
        case fileSearchCall(FileSearchCall)
        case functionCall(FunctionCall)
        case computerCall(ComputerCall)
        case reasoning(Reasoning)

        private enum CodingKeys: String, CodingKey {
            case type
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            
            switch type {
            case "message":
                self = .message(try ResponseOutputMessage(from: decoder))
            case "web_search_call":
                self = .webSearchCall(try WebSearchCall(from: decoder))
            case "file_search_call":
                self = .fileSearchCall(try FileSearchCall(from: decoder))
            case "function_call":
                self = .functionCall(try FunctionCall(from: decoder))
            case "computer_call":
                self = .computerCall(try ComputerCall(from: decoder))
            case "reasoning":
                self = .reasoning(try Reasoning(from: decoder))
            default:
                throw DecodingError.dataCorruptedError(
                    forKey: .type,
                    in: container,
                    debugDescription: "Unknown output item type: \(type)"
                )
            }
        }
    }
    
    // MARK: - Web Search Call
    public struct WebSearchCall: Decodable {
        public var type = "web_search_call"
        public let id: String
        public let status: String
    }

    // MARK: - File Search Call
    public struct FileSearchCall: Decodable {
        public var type = "file_search_call"
        public let id: String
        public let status: String
        public let queries: [String]
        public let results: [FileSearchResult]?

        public struct FileSearchResult: Decodable {
            public let content: String
            public let metadata: [String: String]?
            public let score: Double?
        }
    }

    // MARK: - Function Call
    public struct FunctionCall: Decodable {
        public let type = "function_call"
        public let id: String
        public let callId: String
        public let name: String
        public let arguments: String
        public let status: String

        private enum CodingKeys: String, CodingKey {
            case id
            case callId = "call_id"
            case name
            case arguments
            case status
        }
    }

    // MARK: - Computer Call
    public struct ComputerCall: Decodable {
        public let type = "computer_call"
        public let id: String
        public let callId: String
        public let action: ComputerAction
        public let pendingSafetyChecks: [SafetyCheck]?
        public let status: String

        private enum CodingKeys: String, CodingKey {
            case id
            case callId = "call_id"
            case action
            case pendingSafetyChecks = "pending_safety_checks"
            case status
        }
    }

    public struct ComputerAction: Decodable {
        public let type: String
        public let button: String?
        public let x: Int?
        public let y: Int?
        public let scrollX: Int?
        public let scrollY: Int?
        public let keys: [String]?
        public let text: String?
    }

    public struct SafetyCheck: Decodable {
        public let id: String
        public let code: String
        public let message: String
    }
}

extension OpenAIResponse {
    public struct ResponseOutputMessage: Decodable {
        public let id: String
        public let type = "message"
        public let status: String
        public let role: String
        public let content: [Content]

        private enum CodingKeys: String, CodingKey {
            case id
            case status
            case role
            case content
        }
    }

    public enum Content: Decodable {
        case outputText(OutputText)
        case refusal(String)

        private enum CodingKeys: String, CodingKey {
            case type
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)

            switch type {
            case "output_text":
                self = .outputText(try OutputText(from: decoder))
            case "refusal":
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self = .refusal(try container.decode(String.self, forKey: .type))
            default:
                throw DecodingError.dataCorruptedError(
                    forKey: .type,
                    in: container,
                    debugDescription: "Unknown content type: \(type)"
                )
            }
        }
    }

    public struct OutputText: Decodable {
        public let text: String
        public let annotations: [Annotation]?
    }

    public enum Annotation: Decodable {
        case urlCitation(URLCitation)
        case fileCitation(FileCitation)
        case filePath(FilePath)

        private enum CodingKeys: String, CodingKey {
            case type
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)

            switch type {
            case "url_citation":
                self = .urlCitation(try URLCitation(from: decoder))
            case "file_citation":
                self = .fileCitation(try FileCitation(from: decoder))
            case "file_path":
                self = .filePath(try FilePath(from: decoder))
            default:
                throw DecodingError.dataCorruptedError(
                    forKey: .type,
                    in: container,
                    debugDescription: "Unknown annotation type: \(type)"
                )
            }
        }
    }

    public struct URLCitation: Decodable {
        public let startIndex: Int
        public let endIndex: Int
        public let url: String
        public let title: String

        private enum CodingKeys: String, CodingKey {
            case startIndex = "start_index"
            case endIndex = "end_index"
            case url
            case title
        }
    }

    public struct FileCitation: Decodable {
        public let index: Int
        public let fileId: String
        public let filename: String

        private enum CodingKeys: String, CodingKey {
            case index
            case fileId = "file_id"
            case filename
        }
    }

    public struct FilePath: Decodable {
        public let index: Int
        public let fileId: String

        private enum CodingKeys: String, CodingKey {
            case index
            case fileId = "file_id"
        }
    }
}
