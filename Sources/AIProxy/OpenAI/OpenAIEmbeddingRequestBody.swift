//
//  OpenAIEmbeddingRequestBody.swift
//  AIProxy
//
//  Created by Lou Zell on 2/16/25.
//

/// From OpenAI's docs:
///
/// > Embeddings are a numerical representation of text that can be used to measure the
/// relatedness between two pieces of text. Embeddings are useful for search, clustering,
/// recommendations, anomaly detection, and classification tasks. You can read more about our
/// latest embedding models in the announcement blog post."
///
/// References:
/// - https://openai.com/blog/new-embedding-models-and-api-updates
/// - https://platform.openai.com/docs/api-reference/embeddings/create
public struct OpenAIEmbeddingRequestBody: Encodable {

    /// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs
    /// in a single request, pass an array of strings or array of token arrays. The input must
    /// not exceed the max input tokens for the model (8192 tokens for text-embedding-ada-002),
    /// cannot be an empty string, and any array must be 2048 dimensions or less. Example
    /// Python code for counting tokens. Some models may also impose a limit on total number of
    /// tokens summed across inputs.
    public let input: EmbeddingInput

    /// ID of the model to use.
    /// See the model list here: https://platform.openai.com/docs/models#embeddings
    ///
    /// text-embedding-3-large
    /// Most capable embedding model for both english and non-english tasks.
    /// Output dimension:  3,072
    ///
    /// text-embedding-3-small
    /// Increased performance over 2nd generation ada embedding model.
    /// Output dimension: 1,536
    ///
    /// text-embedding-ada-002
    /// Most capable 2nd generation embedding model, replacing 16 first generation models.
    /// Output dimension: 1,536
    public let model: String

    // MARK: Optional properties

    /// The format to return the embeddings in.
    /// Defaults to float
    public let encodingFormat: EncodingFormat?

    /// The number of dimensions the resulting output embeddings should have. Only supported in
    /// `text-embedding-3` and later models.
    public let dimensions: Int?

    /// A unique identifier representing your end-user, which can help OpenAI to monitor and
    /// detect abuse.
    public let user: String?

    private enum CodingKeys: String, CodingKey {
        case input
        case model

        // Optional properties
        case encodingFormat = "encoding_format"
        case dimensions
        case user
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        input: OpenAIEmbeddingRequestBody.EmbeddingInput,
        model: String,
        encodingFormat: OpenAIEmbeddingRequestBody.EncodingFormat? = nil,
        dimensions: Int? = nil,
        user: String? = nil
    ) {
        self.input = input
        self.model = model
        self.encodingFormat = encodingFormat
        self.dimensions = dimensions
        self.user = user
    }
}

// MARK: -
extension OpenAIEmbeddingRequestBody {
    public enum EmbeddingInput: Encodable {
        case text(String)
        case textArray([String])
        case intArray([Int])

        public func encode(to encoder: any Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .text(let text):
                try container.encode(text)
            case .textArray(let arr):
                try container.encode(arr)
            case .intArray(let arr):
                try container.encode(arr)
            }
        }
    }
}

// MARK: -
extension OpenAIEmbeddingRequestBody {
    public enum EncodingFormat: String, Encodable {
        case float
        case base64
    }
}
