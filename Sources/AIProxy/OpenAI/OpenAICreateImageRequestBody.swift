//
//  OpenAICreateImageRequestBody.swift
//
//
//  Created by Lou Zell on 7/15/24.
//

import Foundation


/// Request body for the 'Create Image' endpoint:
/// https://platform.openai.com/docs/api-reference/images/create
public struct OpenAICreateImageRequestBody: Encodable {

    /// A text description of the desired image(s).
    /// The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
    public let prompt: String

    // MARK: Optional properties

    /// Allows to set transparency for the background of the generated image(s).
    /// This parameter is only supported for `gpt-image-1`.
    /// Must be one of `transparent`, `opaque` or `auto` (default value).
    /// When `auto` is used, the model will automatically determine the best background for the image.
    /// If `transparent`, the output format needs to support transparency, so it should be set to either `png` (default value) or `webp`.
    public let background: Background?

    /// The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`.
    /// Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.
    public let model: Model?

    /// Control the content-moderation level for images generated by `gpt-image-1`.
    /// Must be either low for less restrictive filtering or auto (default value).
    public let moderation: Moderation?

    /// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    /// Defaults to `1`
    public let n: Int?

    /// The compression level (0-100%) for the generated images.
    /// This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
    public let outputCompression: Int?

    /// The format in which the generated images are returned.
    /// This parameter is only supported for `gpt-image-1`.
    /// Must be one of `png`, `jpeg`, or `webp`.
    public let outputFormat: OutputFormat?

    /// The quality of the image that will be generated.
    /// - `auto` (default value) will automatically select the best quality for the given model.
    /// - `high`, `medium` and `low` are supported for gpt-image-1.
    /// - `hd` and `standard` are supported for dall-e-3.
    /// - `standard` is the only option for dall-e-2.
    public let quality: Quality?

    /// The format in which generated images with dall-e-2 and dall-e-3 are returned.
    /// Must be one of `url` or `b64_json`.
    /// URLs are only valid for 60 minutes after the image has been generated.
    /// This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
    public let responseFormat: ResponseFormat?

    /// The size of the generated images.
    /// - For gpt-image-1, one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value)
    /// - For dall-e-3, one of `1024x1024`, `1792x1024`, or `1024x1792`
    /// - For dall-e-2, one of `256x256`, `512x512`, or `1024x1024`
    public let size: String?

    /// The style of the generated images.
    /// This parameter is only supported for `dall-e-3`.
    /// Must be one of `vivid` or `natural`.
    /// Vivid causes the model to lean towards generating hyper-real and dramatic images.
    /// Natural causes the model to produce more natural, less hyper-real looking images.
    public let style: Style?

    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    public let user: String?

    enum CodingKeys: String, CodingKey {
        case prompt

        // Optional properties
        case background
        case model
        case moderation
        case outputCompression = "output_compression"
        case outputFormat = "output_format"
        case n
        case quality
        case responseFormat = "response_format"
        case size
        case style
        case user
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        background: OpenAICreateImageRequestBody.Background? = nil,
        model: OpenAICreateImageRequestBody.Model? = nil,
        moderation: OpenAICreateImageRequestBody.Moderation? = nil,
        n: Int? = nil,
        outputCompression: Int? = nil,
        outputFormat: OpenAICreateImageRequestBody.OutputFormat? = nil,
        quality: OpenAICreateImageRequestBody.Quality? = nil,
        responseFormat: OpenAICreateImageRequestBody.ResponseFormat? = nil,
        size: String? = nil,
        style: OpenAICreateImageRequestBody.Style? = nil,
        user: String? = nil
    ) {
        self.prompt = prompt
        self.background = background
        self.model = model
        self.moderation = moderation
        self.n = n
        self.outputCompression = outputCompression
        self.outputFormat = outputFormat
        self.quality = quality
        self.responseFormat = responseFormat
        self.size = size
        self.style = style
        self.user = user
    }
}

extension OpenAICreateImageRequestBody {
    public enum Background: String, Encodable {
        case auto
        case opaque
        case transparent
    }

    public enum Model: String, Encodable {
        case dallE2 = "dall-e-2"
        case dallE3 = "dall-e-3"
        case gptImage1 = "gpt-image-1"
    }

    public enum Moderation: String, Encodable {
        case auto
        case low
    }

    public enum OutputFormat: String, Encodable {
        case jpeg
        case png
        case webp
    }

    public enum Quality: String, Encodable {
        /// Automatically select the best quality for the given model
        case auto

        /// Supported for gpt-image-1
        case high, medium, low

        /// Supported for dall-e-3.
        case hd, standard
    }

    public enum ResponseFormat: String, Encodable {
        case b64JSON = "b64_json"
        case url
    }

    public enum Style: String, Encodable {
        case vivid
        case natural
    }
}
