//
//  ElevenLabsSpeechToTextRequestBody.swift
//  AIProxy
//
//  Created by Lou Zell on 4/21/25.
//

import Foundation

/// Request body for a speech-to-test request to ElevenLabs.
/// https://elevenlabs.io/docs/api-reference/speech-to-text/convert#request
public struct ElevenLabsSpeechToTextRequestBody: MultipartFormEncodable {
    // Required

    /// The ID of the model to use for transcription, currently only `scribe_v1` and
    /// `scribe_v1_experimental` are available.
    public let modelID: ModelID

    // Optional

    /// The valid AWS S3, Cloudflare R2 or Google Cloud Storage URL of the file to transcribe.
    /// Exactly one of the `file` or `cloudStorageURL` parameters must be provided. The file
    /// must be a valid publicly accessible cloud storage URL. The file size must be less than
    /// 2GB. URL can be pre-signed.
    public let cloudStorageURL: String?

    /// The file to transcribe. All major audio and video formats are supported. Exactly one of
    /// the file or `cloudStorageURL` parameters must be provided.
    public let file: Data?

    /// An ISO-639-1 or ISO-639-3 `language_code` corresponding to the language of the audio
    /// file. Can sometimes improve transcription performance if known beforehand. Defaults to
    /// null, in this case the language is predicted automatically.
    public let languageCode: String?

    /// Whether to tag audio events like (laughter), (footsteps), etc. in the transcription.
    /// Defaults to true
    public let tagAudioEvents: Bool?

    /// The maximum amount of speakers talking in the uploaded file. Can help with predicting
    /// who speaks when. The maximum amount of speakers that can be predicted is 32. Defaults
    /// to null, in this case the amount of speakers is set to the maximum value the model
    /// supports.
    /// Acceptable range: `[1, 32]`
    public let numSpeakers: Int?

    /// The granularity of the timestamps in the transcription. `.word` provides word-level
    /// timestamps and `.character` provides character-level timestamps per word.
    /// Defaults to `.word`
    public let timestampGranularity: TimestampGranularity?

    /// Whether to annotate which speaker is currently talking in the uploaded file.
    /// Defaults to false
    public let diarize: Bool?

    public var formFields: [FormField] {
        return [
            .textField(name: "model_id", content: self.modelID.rawValue),
            self.cloudStorageURL.flatMap { .textField(name: "cloud_storage_url", content: $0) },
            self.file.flatMap { .fileField(name: "file", content: $0, contentType: "application/octet-stream", filename: "tmpfile") },
            self.languageCode.flatMap { .textField(name: "language_code", content: $0) },
            self.tagAudioEvents.flatMap { .textField(name: "tag_audio_events", content: String($0)) },
            self.numSpeakers.flatMap { .textField(name: "num_speakers", content: String($0)) },
            self.timestampGranularity.flatMap { .textField(name: "timestamp_granularity", content: $0.rawValue) },
            self.diarize.flatMap { .textField(name: "diarize", content: String($0)) }
        ].compactMap { $0 }
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(modelID: ModelID, cloudStorageURL: String? = nil, file: Data? = nil, languageCode: String? = nil, tagAudioEvents: Bool? = nil, numSpeakers: Int? = nil, timestampGranularity: ElevenLabsSpeechToTextRequestBody.TimestampGranularity? = nil, diarize: Bool? = nil) {
        self.modelID = modelID
        self.cloudStorageURL = cloudStorageURL
        self.file = file
        self.languageCode = languageCode
        self.tagAudioEvents = tagAudioEvents
        self.numSpeakers = numSpeakers
        self.timestampGranularity = timestampGranularity
        self.diarize = diarize
    }
}

extension ElevenLabsSpeechToTextRequestBody {
    public enum ModelID: String, Encodable {
        case scribeV1 = "scribe_v1"
        case scribeV1Experimental = "scribe_v1_experimental"
    }

    public enum TimestampGranularity: String, Encodable {
        case none
        case word
        case character
    }
}
