//
//  DeepSeekUsage.swift
//  AIProxy
//
//  Created by Lou Zell on 1/27/25.
//

public struct DeepSeekUsage: Decodable {
    /// Number of tokens in the generated completion.
    public let completionTokens: Int?

    /// Breakdown of tokens used in a completion.
    public let completionTokensDetails: CompletionTokenDetails?

    /// Number of tokens in the prompt that hits the context cache.
    public let promptCacheHitTokens: Int?

    /// Number of tokens in the prompt that misses the context cache.
    public let promptCacheMissTokens: Int?

    /// Number of tokens in the prompt.  It equals `prompt_cache_hit_tokens` + `prompt_cache_miss_tokens`.
    public let promptTokens: Int?

    /// Total number of tokens used in the request (prompt + completion).
    public let totalTokens: Int?

    private enum CodingKeys: String, CodingKey {
        case completionTokens = "completion_tokens"
        case completionTokensDetails = "completion_tokens_details"
        case promptCacheHitTokens = "prompt_cache_hit_tokens"
        case promptCacheMissTokens = "prompt_cache_miss_tokens"
        case promptTokens = "prompt_tokens"
        case totalTokens = "total_tokens"
    }
}


extension DeepSeekUsage {
    public struct CompletionTokenDetails: Decodable {
        /// Tokens generated by the model for reasoning.
        public let reasoningTokens: Int?

        private enum CodingKeys: String, CodingKey {
            case reasoningTokens = "reasoning_tokens"
        }
    }
}
