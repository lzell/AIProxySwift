//
//  GeminiImagenRequestBody.swift
//  AIProxy
//
//  Created by Lou Zell on 3/18/25.
//

import Foundation

/// See the Imagen [prompt guide](https://ai.google.dev/gemini-api/docs/imagen-prompt-guide)
///
/// Imagen is described in a few places:
/// - https://ai.google.dev/gemini-api/docs/image-generation#imagen
/// - https://cloud.google.com/vertex-ai/generative-ai/docs/image/model-versioning
/// - https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api
///
/// It's unclear to me whether you need to apply to this first:
/// https://cloud.google.com/vertex-ai/generative-ai/docs/image/overview?authuser=1
///   - Request access: Imagen 3 Customization and Editing
///   - Request access: Person and face generation
public struct GeminiImagenRequestBody: Encodable {
    public let instances: [Instance]
    public let parameters: Parameters

    public init(
        instances: [GeminiImagenRequestBody.Instance],
        parameters: GeminiImagenRequestBody.Parameters
    ) {
        self.instances = instances
        self.parameters = parameters
    }
}

extension GeminiImagenRequestBody {
    public struct Instance: Encodable {
        public let prompt: String
        public let image: InputImage?

        public init(prompt: String, image: GeminiImagenRequestBody.Instance.InputImage? = nil) {
            self.prompt = prompt
            self.image = image
        }
    }

    public struct Parameters: Encodable {
        public init(
            aspectRatio: String? = nil,
            mode: String? = nil,
            personGeneration: GeminiImagenRequestBody.Parameters.PersonGeneration? = nil,
            safetyLevel: GeminiImagenRequestBody.Parameters.SafetyLevel? = nil,
            sampleCount: Int,
            upscaleConfig: GeminiImagenRequestBody.Parameters.UpscaleConfig? = nil
        ) {
            self.aspectRatio = aspectRatio
            self.mode = mode
            self.personGeneration = personGeneration
            self.safetyLevel = safetyLevel
            self.sampleCount = sampleCount
            self.upscaleConfig = upscaleConfig
        }

        /// Supported values are "1:1", "3:4", "4:3", "9:16", and "16:9". The default is "1:1".
        public let aspectRatio: String?

        /// One valid mode is 'upscale'. I do not know what the other valid modes are.
        public let mode: String?

        /// "dont_allow": Disallow the inclusion of people or faces in images.
        /// "allow_adult": Allow generation of adults only.
        /// "allow_all": Allow generation of people of all ages.
        /// The default value is "allow_adult".
        public let personGeneration: PersonGeneration?

        /// Adds a filter level to safety filtering. The following values are supported:
        ///
        ///    "block_low_and_above": Strongest filtering level, most strict blocking.
        ///    "block_medium_and_above": Block some problematic prompts and responses.
        ///    "block_only_high": Reduces the number of requests blocked due to safety filters. May increase objectionable content generated by Imagen.
        ///    "block_none": Block very few problematic prompts and responses. Access to this feature is restricted.
        ///
        /// The default value is "block_medium_and_above".
        public let safetyLevel: SafetyLevel?

        /// The number of images to create
        public let sampleCount: Int

        public let upscaleConfig: UpscaleConfig?
    }
}


extension GeminiImagenRequestBody.Parameters {
    /// Represents the safety filtering level for content moderation.
    public enum SafetyLevel: String, Encodable {
        /// Strongest filtering level, most strict blocking. Deprecated value: "block_most".
        case blockLowAndAbove = "block_low_and_above"

        /// Block some problematic prompts and responses. Deprecated value: "block_some".
        case blockMediumAndAbove = "block_medium_and_above"

        /// Reduces the number of requests blocked due to safety filters. May increase
        /// objectionable content generated by Imagen. Deprecated value: "block_few".
        case blockOnlyHigh = "block_only_high"

        /// Block very few problematic prompts and responses. Access to this feature is
        /// restricted. Previous field value: "block_fewest".
        case blockNone = "block_none"
    }
}

extension GeminiImagenRequestBody.Parameters {
    /// Controls the generation of people or faces in images.
    public enum PersonGeneration: String, Encodable {
        /// Disallow the inclusion of people or faces in images.
        case dontAllow = "dont_allow"

        /// Allow generation of adults only.
        case allowAdult = "allow_adult"

        /// Allow generation of people of all ages.
        case allowAll = "allow_all"
    }
}

extension GeminiImagenRequestBody.Instance {
    public struct InputImage: Encodable {
        public let data: Data

        private enum CodingKeys: String, CodingKey {
            case bytesBase64Encoded
        }

        public init(data: Data) {
            self.data = data
        }

        public func encode(to encoder: any Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.data.base64EncodedString(), forKey: .bytesBase64Encoded)
        }
    }
}

extension GeminiImagenRequestBody.Parameters {
    public struct UpscaleConfig: Encodable {
        public enum UpscaleFactor: String, Encodable {
            case x2
            case x4
        }

        public let upscaleFactor: UpscaleFactor

        public init(upscaleFactor: GeminiImagenRequestBody.Parameters.UpscaleConfig.UpscaleFactor) {
            self.upscaleFactor = upscaleFactor
        }
    }
}
