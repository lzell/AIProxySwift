//
//  FalFastSDXLInputSchema.swift
//
//
//  Created by Lou Zell on 9/13/24.
//

import Foundation

/// Docstrings from:
/// https://fal.ai/models/fal-ai/fast-sdxl/api?platform=http#schema
nonisolated public struct FalFastSDXLInputSchema: Encodable, Sendable {
    // Required

    /// The prompt to use for generating the image. Be as descriptive as possible for best
    /// results.
    public let prompt: String

    // Optional

    /// The list of embeddings to use.
    public let embeddings: [Embedding]?

    /// If set to true, the safety checker will be enabled. Default value: true
    public let enableSafetyChecker: Bool?

    /// If set to true, the prompt will be expanded with additional prompts.
    public let expandPrompt: Bool?

    /// The format of the generated image. Default value: `.jpeg`
    public let format: Format?

    /// The CFG (Classifier Free Guidance) scale is a measure of how close you want the model
    /// to stick to your prompt when looking for a related image to show you.
    /// Default value: `7.5`
    public let guidanceScale: Double?

    /// The size of the generated image.
    /// Default value: `.squareHD`
    public let imageSize: ImageSize?

    /// The list of LoRA weights to use.
    public let loras: [LoraWeight]?

    /// The negative prompt to use. Use it to address details that you don't want in the image.
    /// This could be colors, objects, scenery and even the small details (e.g. moustache,
    /// blurry, low resolution).
    public let negativePrompt: String?

    /// The number of images to generate.
    /// Default value: `1`
    public let numImages: Int?

    /// The number of inference steps to perform.
    /// Default value: `25`
    public let numInferenceSteps: Int?

    /// An id bound to a request, can be used with response to identify the request itself.
    public let requestID: String?

    /// The version of the safety checker to use. `.v1` is the default CompVis safety checker.
    /// `.v2` uses a custom ViT model. Default value: `.v1`
    public let safetyCheckerVersion: SafetyCheckerVersion?

    /// The same seed and the same prompt given to the same version of Stable Diffusion will
    /// output the same image every time.
    public let seed: Int?

    /// If set to true, the function will wait for the image to be generated and uploaded
    /// before returning the response. This will increase the latency of the function but it
    /// allows you to get the image directly in the response without going through the CDN.
    public let syncMode: Bool?

    private enum CodingKeys: String, CodingKey {
        case embeddings
        case enableSafetyChecker = "enable_safety_checker"
        case expandPrompt = "expand_prompt"
        case format
        case guidanceScale = "guidance_scale"
        case imageSize = "image_size"
        case loras
        case negativePrompt = "negative_prompt"
        case numImages = "num_images"
        case numInferenceSteps = "num_inference_steps"
        case prompt
        case requestID = "request_id"
        case safetyCheckerVersion = "safety_checker_version"
        case seed
        case syncMode = "sync_mode"
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        embeddings: [FalFastSDXLInputSchema.Embedding]? = nil,
        enableSafetyChecker: Bool? = nil,
        expandPrompt: Bool? = nil,
        format: FalFastSDXLInputSchema.Format? = nil,
        guidanceScale: Double? = nil,
        imageSize: FalFastSDXLInputSchema.ImageSize? = nil,
        loras: [FalFastSDXLInputSchema.LoraWeight]? = nil,
        negativePrompt: String? = nil,
        numImages: Int? = nil,
        numInferenceSteps: Int? = nil,
        requestID: String? = nil,
        safetyCheckerVersion: FalFastSDXLInputSchema.SafetyCheckerVersion? = nil,
        seed: Int? = nil,
        syncMode: Bool? = nil
    ) {
        self.prompt = prompt
        self.embeddings = embeddings
        self.enableSafetyChecker = enableSafetyChecker
        self.expandPrompt = expandPrompt
        self.format = format
        self.guidanceScale = guidanceScale
        self.imageSize = imageSize
        self.loras = loras
        self.negativePrompt = negativePrompt
        self.numImages = numImages
        self.numInferenceSteps = numInferenceSteps
        self.requestID = requestID
        self.safetyCheckerVersion = safetyCheckerVersion
        self.seed = seed
        self.syncMode = syncMode
    }
}

extension FalFastSDXLInputSchema {
    nonisolated public enum ImageSize: String, Encodable, Sendable {
        case landscape4x3 = "landscape_4_3"
        case landscape16x9 = "landscape_16_9"
        case portrait4x3 = "portrait_4_3"
        case portrait16x9 = "portrait_16_9"
        case square
        case squareHD = "square_hd"
    }
}

extension FalFastSDXLInputSchema {
    nonisolated public struct LoraWeight: Encodable, Sendable {
        // Required
        /// URL or the path to the LoRA weights. Or HF model name.
        public let path: String

        // Optional
        /// If set to true, the embedding will be forced to be used.
        public let force: Bool?

        /// The scale of the LoRA weight. This is used to scale the LoRA weight before merging
        /// it with the base model. Default value: `1`
        public let scale: Double?
    }
}

extension FalFastSDXLInputSchema {
    nonisolated public struct Embedding: Encodable, Sendable {
        // Required
        /// URL or the path to the embedding weights.
        public let path: String

        // Optional
        /// The list of tokens to use for the embedding. Default value: `<s0>,<s1>`
        public let tokens: String?
    }
}

extension FalFastSDXLInputSchema {
    nonisolated public enum SafetyCheckerVersion: String, Encodable, Sendable {
        case v1
        case v2
    }
}

extension FalFastSDXLInputSchema {
    nonisolated public enum Format: String, Encodable, Sendable {
        case jpeg
        case png
    }
}
